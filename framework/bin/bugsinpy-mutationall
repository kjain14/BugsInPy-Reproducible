#!/bin/bash
set -x

### bugsinpy-mutateall performs mutation testing on all projects and buggy versions
# This script is adapted to use conda environments, similar to the bugsinpy-testall script.
# It targets the fixed version of buggy files for mutation testing against the entire test suite.

usage="
       -h
             show this help
       -c
             cleanup temp directory
       -p
             specify multiple project:start:end or project:end or project:
             Ex;
             pandas:75:100 (run mutation tests for bugs 75 to 100 in pandas)
             black:5 ansible: (run mutation tests for bug 5 in black and all bugs in ansible)
"

dir_of_script=$(dirname $0)
bugsinpy_location=$(realpath $dir_of_script/../..)
temp_projects="$bugsinpy_location/temp/projects"
logs_dir="$bugsinpy_location/temp/logs" # Directory to save logs
index_name="bugsinpy-mutation.csv"
index_file="$bugsinpy_location/projects/$index_name"

case $1 in
 -[h?] | --help)
    echo "Usage: ${0##*/} [ --help ]"
    echo "$usage"
    exit 0;;
 -c)
    rm -rf "$temp_projects"
    rm -rf "$logs_dir" # Cleanup logs directory as well
    exit 0;;
 -p)
    projects="${@:2}";;
esac

mkdir -p $temp_projects
mkdir -p $logs_dir # Ensure logs directory exists

if ! echo $projects | grep -q ":"; then
  projects=$(ls $bugsinpy_location/projects | grep -v $index_name)
fi

if [ ! -f $index_file ]; then
  echo "repo,bugid,version,result" > $index_file
fi

# Iterate over the projects
for project_name in $projects; do
  echo $project_name
  # Extract start, finish, and project name
  if echo $projects | grep -q ":"; then
    start=$(echo $project_name | cut -d ":" -f 2)
    finish=$(echo $project_name | cut -d ":" -f 3)
    project=$(echo $project_name | cut -d ":" -f 1)
    if [[ "$start" == "" ]]; then
      finish=$(ls $bugsinpy_location/projects/$project/bugs | wc -l)
      start=1
    elif [[ "$finish" == "" ]]; then
      finish=$start
    fi
  else
    start=1
    finish=$(ls $bugsinpy_location/projects/$project_name/bugs | wc -l)
  fi

  work_dir="$temp_projects/$project"
  echo $work_dir
  # For each bug, run mutation testing
  for bug in $(seq $start $finish); do

    bug_source_dir="$bugsinpy_location/projects/$project/bugs/$bug"

    if ! grep "$project,$bug," $index_file && [ -d "$bug_source_dir" ]; then

      # Make sure requirements.txt always exist even if empty
      touch $bug_source_dir/requirements.txt

      bug_info="$work_dir/bugsinpy_bug.info"

      bugsinpy-checkout -p $project -v 1 -i $bug -w $temp_projects &>> $temp_projects/$project-checkout-logs.txt
      cd $work_dir

      # Cleanup requirements.txt from unwanted spaces
      # dos2unix is required to make sure requirements.txt is always the correct encoding
      requirements="$work_dir/bugsinpy_requirements.txt"
      sed -i -e '/^\s*#.*$/d' -e '/^\s*$/d' "$requirements"
      dos2unix $requirements &>/dev/null

      # Add environment
      . /opt/conda/etc/profile.d/conda.sh &>> $work_dir/logs.txt
      # Generate unique hash for the current enviroment
      bug_python_version=$(grep -o "3\..\.." $bug_info)
      conda_env_name=$(cat <(echo $bug_python_version) "$requirements" | md5sum | cut -d' ' -f 1)

      if ! conda env list | grep -q "$conda_env_name"; then
        conda create -n $conda_env_name -y python=$bug_python_version pytest &>> $work_dir/logs.txt
      fi

      bugsinpy-compile &>> $work_dir/logs.txt
      bugsinpy-test &> "$bug_source_dir/bug_$version.txt"
        
      mutation_log_file="$logs_dir/mutation_${project}_bug${bug}.txt" # Path to save mutation log
      bugsinpy-mutation &> $mutation_log_file

      # Check mutation test output and log results
      if grep -q "error" $mutation_log_file; then
        echo "$project,$bug,error" | tee -a $index_file
      else
        echo "$project,$bug,done" | tee -a $index_file
      fi
    fi
  done
done
